@implements IDisposable
@rendermode InteractiveServer
<div class="btn-group" role="group" aria-label="Pager">
    <!-- Кнопка Previous -->
    <button type="button" class="btn btn-outline-primary @(previousEnabled ? "" : "disabled")"
            @onclick="@(() => OnPageSelected(ProductService.CurrentPage - 1))">
        <span aria-hidden="true">«</span>
    </button>
    @for (int i = 1; i <= ProductService.TotalPages; i++)
    {
        var temp = i;
        <button type="button" class="btn btn-outline-primary @(IsActive(temp) ? "active" : "")"
                @onclick="@(() => OnPageSelected(temp))">
            @temp
        </button>
    }
    <!-- Кнопка Next -->
    <button type="button" class="btn btn-outline-primary @(nextEnabled ? "" : "disabled")"
            @onclick="@(() => OnPageSelected(ProductService.CurrentPage + 1))">
        <span aria-hidden="true">»</span>
    </button>
</div>
@code {
    [CascadingParameter]
    public IProductService<Dish> ProductService { get; set; }

    protected override void OnInitialized()
    {
        ProductService.ListChanged += StateHasChanged;
    }

    private bool previousEnabled => ProductService.CurrentPage > 1;
    private bool nextEnabled => ProductService.CurrentPage < ProductService.TotalPages;
    private bool IsActive(int pageNo) => pageNo == ProductService.CurrentPage;

    private async Task OnPageSelected(int pageNo)
    {
        if (pageNo >= 1 && pageNo <= ProductService.TotalPages)
        {
            await ProductService.GetProducts(pageNo);
            StateHasChanged(); // Явный вызов для обновления UI
        }
    }

    public void Dispose()
    {
        ProductService.ListChanged -= StateHasChanged;
    }
}