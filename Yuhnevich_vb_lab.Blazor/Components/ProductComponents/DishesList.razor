@implements IDisposable
@rendermode InteractiveServer
<h3>Блюда дня</h3>
@if (ProductService.Products != null && ProductService.Products.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Название</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ProductService.Products)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-outline-dark"
                                @onclick="@(() => OnDishSelected(item.Id))">
                            Подробно
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Нет данных для отображения</p>
}
@code {
    [CascadingParameter]
    public IProductService<Dish> ProductService { get; set; }
    [Parameter]
    public EventCallback<int> DishSelected { get; set; }

    protected override void OnInitialized()
    {
        ProductService.ListChanged += StateHasChanged;
    }

    private async Task OnDishSelected(int id)
    {
        await DishSelected.InvokeAsync(id);
    }

    public void Dispose()
    {
        ProductService.ListChanged -= StateHasChanged;
    }
}